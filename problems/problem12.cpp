#include "StdAfx.h"
#include "../problems.h"

Problem12::Problem12()
{

}

Problem12::~Problem12()
{

}

bool Problem12::init()
{
	return true;
}

void Problem12::run()
{
	/*
	The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

	Let us list the factors of the first seven triangle numbers:

	 1: 1
	 3: 1,3
	 6: 1,2,3,6
	10: 1,2,5,10
	15: 1,3,5,15
	21: 1,3,7,21
	28: 1,2,4,7,14,28
	We can see that 28 is the first triangle number to have over five divisors.

	What is the value of the first triangle number to have over five hundred divisors?
	*/

	//method: for loop through triangle numbers, then iterate through divisors
	
	long triangle = 0;

	for(long i = 1; ; i++)
	{
		triangle += i;

		std::cout << "The " << i << " triangle number " << triangle << " has divisors: ";

		long count = 0;

		for(long j = 1; j <= triangle; j++)
		{

			if(triangle % j == 0)
			{
				count++;
				std::cout << j << ", ";
			}

		}

		std::cout << "for a total of: " << count << std::endl;

		//std::cout << "The " << i << " triangle number " << triangle << " has " << count << " divisors" << std::endl;

		if(count > 500) break;
		
	}


	std::cout << "The first triangle number to have over 500 divisors is: " << triangle << std::endl;
	
}